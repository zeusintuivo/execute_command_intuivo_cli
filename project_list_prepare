#!/usr/bin/env bash
#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
# Helper For testing downloading a list of subfolders

load_execute_commands_wget(){
        local URL=""
        local cached_directory="/_/clis/execute_command_intuivo_cli/"
        local EXECOMCLI=""
        local provider=""
        [   -d "${cached_directory}" ] &&  provider="file://${cached_directory}"
        [ ! -d "${cached_directory}" ] &&  provider="https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/"
        local BASH_SCRIPTS="
    struct_testing
    execute_command
    check_system_requirements
    "
    #execute_command
        while read -r ONE_SCRIPT; do
        {
            if [ ! -z "${ONE_SCRIPT}" ] ; then         # if not empty
            {
                URL="${provider}${ONE_SCRIPT}"
                [   -d "${cached_directory}" ] && source "${cached_directory}${ONE_SCRIPT}"
                [   -d "${cached_directory}" ] && ( command -v type passed >/dev/null 2>&1;) && passed "${cached_directory}${ONE_SCRIPT} Loaded"
                [ ! -d "${cached_directory}" ] && eval """$(wget --quiet --no-check-certificate $URL  -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
                [ ! -d "${cached_directory}" ] && ( command -v type passed >/dev/null 2>&1;) && passed "$URL Loaded"
                
            }
            fi
        }
        done <<< "${BASH_SCRIPTS}"
        unset URL
        unset EXECOMCLI
        unset ONE_SCRIPT
        unset BASH_SCRIPTS
        unset provider
        ( ( ! command -v type passed >/dev/null 2>&1;) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
    }
    # end load_execute_commands_wget
load_execute_commands_wget


load_extract_something_trimmed_between(){
        local URL=""
        local cached_directory="/_/clis/journal_intuivo_cli/"
        local EXECOMCLI=""
        local provider=""
        [   -d "${cached_directory}" ] &&  provider="file://${cached_directory}"
        [ ! -d "${cached_directory}" ] &&  provider="https://raw.githubusercontent.com/zeusintuivo/journal_intuivo_cli/master/"
        local BASH_SCRIPTS="
    journal_get_extract_something_trimmed_between
    "
    #execute_command
        while read -r ONE_SCRIPT; do
        {
            if [ ! -z "${ONE_SCRIPT}" ] ; then         # if not empty
            {
                URL="${provider}${ONE_SCRIPT}"
                [   -d "${cached_directory}" ] && source "${cached_directory}${ONE_SCRIPT}"
                [   -d "${cached_directory}" ] && ( command -v type extract_something_trimmed_between >/dev/null 2>&1;) && passed "${cached_directory}${ONE_SCRIPT} Loaded"
                [ ! -d "${cached_directory}" ] && eval """$(wget --quiet --no-check-certificate $URL  -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
                [ ! -d "${cached_directory}" ] && ( command -v type extract_something_trimmed_between >/dev/null 2>&1;) && passed "$URL Loaded"
                
            }
            fi
        }
        done <<< "${BASH_SCRIPTS}"
        unset URL
        unset EXECOMCLI
        unset ONE_SCRIPT
        unset BASH_SCRIPTS
        unset provider
        ( ( ! command -v type extract_something_trimmed_between >/dev/null 2>&1;) && echo -e "\n \n  ERROR! Loading extract_something_trimmed_between \n \n " && exit 69; )
    }
    # end load_extract_something_trimmed_between
load_extract_something_trimmed_between





yarn_install(){
	local NODE_VER YARN_PASSED YARN_INSTALL_GLOBAL YARN_INSTALL_GLOBALS
	if [ -e yarn.lock ] ; then 
	{

		# nvm fix
		export NVM_DIR="$HOME/.nvm"
		[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
		[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

		if [ -e .nvmrc ] ; then 
		{
			NODE_VER=$(<.nvmrc)
		} 
		else
		{
			if [ -e yarn.lock ] ; then 
			{
				NODE_VER=$(cat yarn.lock | grep @types/node/-/node- | cut -d- -f3 | cut -d'#' -f1  | sed s/.tgz//)
			}
			fi

			if [ -z ${NODE_VER} ] && [ -e package.json ] ; then 
			{
				NODE_VER=$(cat package.json | grep '"node"' | cut -d'"' -f4) 
				if [ -z ${NODE_VER} ] && [ -e package.json ] ; then 
				{
					NODE_VER=($(cat package.json | grep "'node'" | cut -d"'" -f4) )
				}
				fi
			}
			fi

		}
		fi

		if [ -z ${NODE_VER} ] && [ -e package.json ] ; then 
		{
			NODE_VER="stable"
		}
		fi

		if  [ ! -z ${NODE_VER} ] && (! version_installed_is  "node --version"  "${NODE_VER}") ; then 
		{
    		passed "Correct Node Version: ${NODE_VER}"	
		} 
	    else 
	    {
	    	warning "incorrect node Version: ${NODE_VER}"	
	    	if  (version_installed_is  "nvm ls"  "node-${NODE_VER}") ; then 
	    	{
				nvm use "${NODE_VER}"	
			} 
		    else 
		    {
	    		nvm install "${NODE_VER}"
	    		wait
	    		nvm use "${NODE_VER}"
		    }
			fi
		}
		fi
		verify_installed_version "node --version"  "${NODE_VER}"
		echo "yarn"
		# REF https://skorks.com/2009/09/using-bash-to-output-to-screen-and-file-at-the-same-time/  # Using Bash To Output To Screen And File At The Same Time
		# ls - garbage 3>&1 1>/dev/null 2>&3- | tee blah.txt  
		# yarn install 3>&1 1>/dev/null 2>&3- | tee .project_list_yarn_install_log
		yarn install 2>&1 | tee .project_list_yarn_install_log
    	# YARN_PASSED=$(yarn install 3>&1 1>/dev/null 2>&3- | tee .project_list_yarn_install_log)
    	YARN_PASSED=$(<.project_list_yarn_install_log)
    	if (has_error_keyword "${YARN_PASSED}") ; then 
    	{
    		results_failed "yarn install" 
    		echo -e "${YARN_PASSED}"
    		failed "yarn install" 
    		if [[ "${YARN_PASSED}" == *"Warning: Could not find"* ]] ; then
    		{
    			YARN_INSTALL_GLOBALS=$(echo "${YARN_PASSED}" | grep "Warning: Could not find" | sed s/"Warning: Could not find "//g |  sed s/"in global npm."//g )
    			while read -r YARN_INSTALL_GLOBAL; do                                        
				  {
				    
				    if [ ! -z "${YARN_INSTALL_GLOBAL}" ] ; then # if not empty
				    {
				    	anounce "${YARN_INSTALL_GLOBAL} is missing" 
				    	warning installing now global "${YARN_INSTALL_GLOBAL}"
				    	yarn global add "${YARN_INSTALL_GLOBAL}"  2>&1 | tee .project_list_yarn2_install_log
				      	wait
				    }
				    fi
				  }
				done <<< "${YARN_INSTALL_GLOBALS}"
		    	yarn install 2>&1 | tee .project_list_yarn_install_log
		    	YARN_PASSED=$(<.project_list_yarn_install_log)
		    	if (has_error_keyword "${YARN_PASSED}") ; then 
	    		{
	    			results_failed
		    		echo -e "${YARN_PASSED}"
		    		failed "yarn install" 
		    	}
		    	else
		    	{
		    		passed "yarn install" 
		    		results_passed "yarn install" 
		    	} 
		    	fi
    		}
    		fi
    	}
    	else
    	{
    		passed "yarn install" 
    		results_passed "yarn install" 
    	} 
    	fi

	}
	fi 
	wait
}

npm_install(){
	local NODE_VER NPM_PASSED
	if [ -e package-lock.json ] ; then 
	{

		# nvm fix
		export NVM_DIR="$HOME/.nvm"
		[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
		[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

		if [ -e .nvmrc ] ; then 
		{
			NODE_VER=$(<.nvmrc)
		} 
		else
		{
			if [ -e package-lock.json ] ; then 
			{
				NODE_VER=$(cat package-lock.json | grep @types/node/-/node- | cut -d- -f3 | cut -d'#' -f1  | sed s/.tgz//)
			}
			fi

			if [ -z ${NODE_VER} ] && [ -e package.json ] ; then 
			{
				NODE_VER=$(cat package.json | grep '"node"' | cut -d'"' -f4) 
				if [ -z ${NODE_VER} ] && [ -e package.json ] ; then 
				{
					NODE_VER=($(cat package.json | grep "'node'" | cut -d"'" -f4) )
				}
				fi
			}
			fi

		}
		fi

		if [ -z ${NODE_VER} ] && [ -e package.json ] ; then 
		{
			NODE_VER="stable"
		}
		fi

		if  [ ! -z ${NODE_VER} ] && (! version_installed_is  "node --version"  "${NODE_VER}") ; then 
		{
    		passed "Correct Node Version: ${NODE_VER}"	
		} 
	    else 
	    {
	    	warning "incorrect node Version: ${NODE_VER}"	
	    	if  (version_installed_is  "nvm ls"  "node-${NODE_VER}") ; then 
	    	{
				nvm use "${NODE_VER}"	
			} 
		    else 
		    {
	    		nvm install "${NODE_VER}"
	    		wait
	    		nvm use "${NODE_VER}"
		    }
			fi
		}
		fi
		verify_installed_version "node --version"  "${NODE_VER}"
		echo "yarn"
		# REF https://skorks.com/2009/09/using-bash-to-output-to-screen-and-file-at-the-same-time/  # Using Bash To Output To Screen And File At The Same Time
		# ls - garbage 3>&1 1>/dev/null 2>&3- | tee blah.txt  
		# npm install 3>&1 1>/dev/null 2>&3- | tee .project_list_npm_install_log
		npm install 2>&1 | tee .project_list_npm_install_log
    	# NPM_PASSED=$(npm install 3>&1 1>/dev/null 2>&3- | tee .project_list_npm_install_log)
    	NPM_PASSED=$(<.project_list_npm_install_log)
    	if (has_error_keyword "${NPM_PASSED}") ; then 
    	{
    		results_failed "npm install" 
    		echo -e "${NPM_PASSED}"
    		failed "npm install" 
    		if [[ "${NPM_PASSED}" == *"Warning: Could not find"* ]] ; then
    		{
    			local NPM_GLOBAL_INSTALL NPM_GLOBAL_INSTALLS=$(echo "${NPM_PASSED}" | grep "Warning: Could not find" | sed s/"Warning: Could not find "//g |  sed s/"in global npm."//g )
    			while read -r NPM_GLOBAL_INSTALL; do                                        
				  {
				    
				    if [ ! -z "${NPM_GLOBAL_INSTALL}" ] ; then # if not empty
				    {
				    	anounce "${NPM_GLOBAL_INSTALL} is missing" 
				    	warning installing now global "${NPM_GLOBAL_INSTALL}"
				    	npm -g install "${NPM_GLOBAL_INSTALL}"  2>&1 | tee .project_list_npm2_install_log
				      	wait
				    }
				    fi
				  }
				done <<< "${NPM_GLOBAL_INSTALLS}"
		    	npm install 2>&1 | tee .project_list_npm_install_log
		    	NPM_PASSED=$(<.project_list_npm_install_log)
		    	if (has_error_keyword "${NPM_PASSED}") ; then 
	    		{
	    			results_failed "npm install" 
		    		echo -e "${NPM_PASSED}"
		    		failed "npm install" 
		    	}
		    	else
		    	{
		    		passed "npm install" 
		    		results_passed "npm install" 
		    	} 
		    	fi
    		}
    		fi
    	}
    	else
    	{
    		passed "npm install" 
    		results_passed "npm install" 
    	} 
    	fi

	}
	fi 
	wait
}

docker_install(){
	local DOCKER_PASSED
    if  [ -e docker-compose.yml ] ; then 
	{
		echo "dockler-compose"
		docker-compose build 2>&1 | tee .project_list_docker_install_log
		DOCKER_PASSED=$(<.project_list_docker_install_log)
    	if (has_error_keyword "${DOCKER_PASSED}") ; then 
    	{
    		results_failed "docker-compose build" 
    		echo -e "${DOCKER_PASSED}"
    		failed "docker-compose build" 
    	}
    	else
    	{
    		passed "docker-compose build" 
    		results_passed "docker-compose build" 
    	} 
    	fi
	}
	fi 
}

bundle_install(){
	local RUBY_VER BUNDLE_PASSED EXECUTE_GEM_INSTALL

	export PATH="$PATH:$HOME/.rvm/bin"

	if [ -e Gemfile.lock ] ; then 
	{
		echo "Check Ruby Version"
		if [ -e .ruby-version ] ; then 
		{
			RUBY_VER=$(<.ruby-version)
		} 
		else
		{
			if [ -e Gemfile ] ; then 
			{
				RUBY_VER=$(cat Gemfile | grep "^ruby" | cut -d\' -f2)
				if  (version_installed_is  "ruby --version"  "ruby ${RUBY_VER}") ; then 
				{
		    		passed "Correct Ruby Version: ${RUBY_VER}"	
				} 
			    else 
			    {
			    	warning "incorrect Ruby Version: ${RUBY_VER}"	
			 
				}
				fi
			}
			fi

		}
		fi

		if  [ ! -z ${RUBY_VER} ] && (! version_installed_is  "ruby --version"  "${RUBY_VER}") ; then 
		{
    		passed "Correct Ruby Version: ${RUBY_VER}"	
		} 
	    else 
	    {
	    	warning "incorrect Ruby Version: ${RUBY_VER}"	
	    	if  (version_installed_is  "rvm ls"  "${RUBY_VER}") ; then 
	    	{
				rvm use "${RUBY_VER}"	
			} 
		    else 
		    {
		    	export LDFLAGS="-L/usr/local/opt/openssl/lib"
  				export CPPFLAGS="-I/usr/local/opt/openssl/include"
  				export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"

	    		rvm install "ruby-${RUBY_VER}" --with-openssl-dir=/usr/local/opt
	    		wait
	    		rvm use "${RUBY_VER}"
		    }
			fi
		}
		fi

		verify_installed_version "ruby --version"  "${RUBY_VER}"
		echo "bundler"
		# REF https://skorks.com/2009/09/using-bash-to-output-to-screen-and-file-at-the-same-time/  # Using Bash To Output To Screen And File At The Same Time
		# ls - garbage 3>&1 1>/dev/null 2>&3- | tee blah.txt  
		bundle install  2>&1 | tee .project_list_bundle_install_log
    	# BUNDLE_PASSED=$(bundle install 3>&1 1>/dev/null 2>&3- | tee .project_list_bundle_install_log)
    	BUNDLE_PASSED=$(<.project_list_bundle_install_log)
    	if (has_error_keyword "${BUNDLE_PASSED}") ; then 
    	{
    		results_failed
    		echo -e "${BUNDLE_PASSED}"
    		failed "bundle install" 
    		anounce Attempting to do again
			# EXECUTE_GEM_INSTALL=$(echo "${BUNDLE_PASSED}" | extract_something_trimmed_between "Make sure that `" "` succeeds before bundling.")
	    	local EXECUTE_GEM EXECUTE_GEMS=$(echo "${BUNDLE_PASSED}" | grep "Make sure that" | sed s/gem/\\\ngem/g | grep gem | sed s/gem//g )
	    	while read -r EXECUTE_GEM; do                                        
			  {
			    
			    if [ ! -z "${EXECUTE_GEM}" ] ; then # if not empty
			    {
			    	anounce "${EXECUTE_GEM} is missing" 
			    	gem ${EXECUTE_GEM} 'http://rubygems.org/' 2>&1 | tee .project_list_bundle2_install_log
			      	wait
			    }
			    fi
			  }
			done <<< "${EXECUTE_GEMS}"
	    	bundle install  2>&1 | tee .project_list_bundle_install_log
	    	BUNDLE_PASSED=$(<.project_list_bundle_install_log)
	    	if (has_error_keyword "${BUNDLE_PASSED}") ; then 
    		{
    			results_failed
	    		echo -e "${BUNDLE_PASSED}"
	    		failed "bundle install" 
	    	}
	    	else
	    	{
	    		passed "bundle install" 
	    		results_passed "bundle install" 
	    	} 
	    	fi
    	}
    	else
    	{
    		passed "bundle install" 
    		results_passed "bundle install" 
    	} 
    	fi

	}
	fi 
	wait
}

copy_temp_keys_here(){
	[ ! -e .temp_keys ] && cp ../.temp_keys .
}

REPOS=""
process_list_repos(){
    # Sample use: process_list_repos "${REPOS}"
	local LINE
	local _repos=${@}
	local SAVDCD=$(pwd)
	while read -r LINE; do                                        
	  {
	    
	    if [ ! -z "${LINE}" ] ; then # if not empty
	    {
	    	anounce "${LINE}" - $GREEN"git@github.com:doctolib/${LINE}.git" 
	    	if [ ! -d "${SAVDCD}/${LINE}" ] ; then # if not empty
	    	{
	        	git clone --recurse-submodules "git@github.com:doctolib/${LINE}.git" 
			} 
		    else
		    {
		    	cd "${SAVDCD}/${LINE}"
		    	copy_temp_keys_here
		    	pull
			    yarn_install
			    docker_install
			    bundle_install
		    	cd "${SAVDCD}"
		    }
			fi
	      wait
	    }
	    fi
	  }
	done <<< "${_repos}"
}

REMOVEABLE=""


remove_list_repos(){
    # Sample use: remove_list_repos "${REMOVEABLE}"
	local LINE
	local _repos=${@}
	local SAVDCD=$(pwd)
	while read -r LINE; do                                        
	  {
	    
	    if [ ! -z "${LINE}" ] ; then # if not empty
	    {
	    	anounce "${SAVDCD}/${LINE} - remove "
	    	if [ -d "${SAVDCD}/${LINE}" ] ; then # if not empty
	    	{
		    	rm -rf "${SAVDCD}/${LINE}"
		    }
			fi
	      wait
	    }
	    fi
	  }
	done <<< "${_repos}"
}
